{"version":3,"file":"static/js/744.70ecdd87.chunk.js","mappings":"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","sources":["webpack://react-team-project/./src/pages/ResultPage/resultsPage.module.css?9e2c","webpack://react-team-project/./src/components/Results/results.module.css?b148","components/Results/Graffic/Graffic.jsx","components/Results/Results.jsx","pages/ResultPage/ResultsPage.jsx","redux/testInfo/testInfo-selector.js","webpack://react-team-project/./src/shared/components/Container/container.module.css?d150","shared/components/Container/Container.jsx","shared/services/test.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"resultsPage_section__l9o1+\",\"title\":\"resultsPage_title__+TcRq\"};","// extracted by mini-css-extract-plugin\nexport default {\"border\":\"results_border__l+j68\",\"description\":\"results_description__DIbyb\",\"rectangle\":\"results_rectangle__LNBz7\",\"answers\":\"results_answers__ZcVQW\",\"list\":\"results_list__hZ1O+\",\"item\":\"results_item__SQ8Gy\",\"decoration\":\"results_decoration__zusfr\",\"number\":\"results_number__NTuuJ\",\"image\":\"results_image__0Yblg\",\"mainMessage\":\"results_mainMessage__sHVNW\",\"secondaryMessage\":\"results_secondaryMessage__510sg\",\"button\":\"results_button__nlDQH\",\"loading\":\"results_loading__iVWjr\"};","import { Component } from 'react';\n// import { render } from 'react-dom';\nimport { VictoryPie } from 'victory';\n\nclass Graffic extends Component {\n  render() {\n    const { items } = this.props;\n    return (\n      <VictoryPie\n        data={[\n          { x: `${items.result} Correct`, y: Number.parseInt(items.result) },\n          {\n            x: `${100 - Number.parseInt(items.result)}% Incorrect`,\n            y: 100 - Number.parseInt(items.result),\n          },\n        ]}\n        animate={{\n          duration: 2000,\n        }}\n        colorScale={['var(--accent-color)', '#D7D7D7']}\n        height={200}\n        // width={156}\n      />\n    );\n  }\n}\n\nexport default Graffic;\n","import styles from './results.module.css';\nimport image from 'shared/images/image.png';\n// import rectangleOrange from '../../shared/images/rectangleOrange.png';\n// import rectangleGray from '../../shared/images/rectangleGray.png';\nimport { useState, useEffect } from 'react';\nimport { useSelector, shallowEqual, useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { getTypeQuestions, getTestAnswers } from 'redux/testInfo/testInfo-selector';\nimport { getResult } from 'shared/services/test';\nimport Graffic from './Graffic';\nimport { actions } from 'redux/testInfo/testInfo-slice';\n\nconst Results = () => {\n  const [result, setResult] = useState({\n    items: { result: '30%' },\n    loading: false,\n    error: null,\n  });\n  const navigate = useNavigate();\n  const testType = useSelector(getTypeQuestions, shallowEqual);\n  const testAnswers = useSelector(getTestAnswers, shallowEqual);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const resultFetch = async () => {\n      setResult(prevState => ({ ...prevState, loading: true, error: null }));\n      try {\n        const type =\n          getTypeQuestions === 'QA technical training' ? 'tech' : 'theory';\n        const data = await getResult(type, testAnswers);\n        setResult(prevState => ({\n          ...prevState,\n          items: data,\n          loading: false,\n        }));\n      } catch (error) {\n        setResult(prevstate => ({\n          ...prevstate,\n          loading: false,\n          error: error.message,\n        }));\n      }\n    };\n    resultFetch();\n  }, [testAnswers]);\n\n  const tryAgainClick = () => {\n    const action = actions.removeAnswers();\n    dispatch(action);\n    navigate('/test');\n  };\n\n  const { items, loading } = result;\n\n  return (\n    <>\n      <div className={styles.border}>\n        <h3 className={styles.description}>[ {testType}_]</h3>\n      </div>\n      {loading && <p className={styles.loading}>LOADING...</p>}\n      <div>\n        <Graffic items={items} />\n      </div>\n      {/* <ul>\n        <li className={styles.answers}>\n          <img\n            className={styles.rectangle}\n            src={rectangleOrange}\n            alt=\"Rectangle Orange\"\n          />\n          {Number.parseInt(items.result)}% Correct..\n        </li>\n        <li className={styles.answers}>\n          <img\n            className={styles.rectangle}\n            src={rectangleGray}\n            alt=\"Rectangle Gray\"\n          />\n          {100 - Number.parseInt(items.result)}% Incorre—Åt\n        </li>\n      </ul> */}\n      <ul className={styles.list}>\n        <li className={styles.item}>\n          Correct answers -{' '}\n          <span className={styles.number}>\n            {Number.parseInt((12 / 100) * Number.parseFloat(items.result))}\n          </span>\n        </li>\n        <span className={styles.decoration}>|</span>\n        <li className={styles.item}>\n          Total questions - <span className={styles.number}>12</span>\n        </li>\n      </ul>\n      <img className={styles.image} src={image} alt=\"Cat\" />\n      <p className={styles.mainMessage}>Not bad!{items.mainMessage}</p>\n      <p className={styles.secondaryMessage}>\n        But you still need to learn some materials.{items.secondaryMessage}\n      </p>\n      <button className={styles.button} type=\"button\" onClick={tryAgainClick}>\n        Try again\n      </button>\n    </>\n  );\n};\n\nexport default Results;\n","import styles from './resultsPage.module.css';\nimport Results from '../../components/Results';\nimport Container from '../../shared/components/Container';\n\nfunction ResultPage() {\n  return (\n    <section className={styles.section}>\n      <Container>\n        <h2 className={styles.title}>Results</h2>\n        <Results />\n        {/* todo result text (with type of test) \n                result diagram (use library)\n                result statistics\n                common btn \n\n            */}\n      </Container>\n    </section>\n  );\n}\n\nexport default ResultPage;\n","\nexport const getTypeQuestions = ({ testInfo }) => testInfo.testType;\nexport const getTestAnswers = ({ testInfo }) => testInfo.testAnswers;\n\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container_container__7D7mb\",\"title\":\"container_title__qyPiS\"};","import PropTypes from 'prop-types';\n\nimport s from './container.module.css';\n\nfunction Container({ title, children }) {\n  return (\n    <div className={s.container}>\n      <h2 className={s.title}>{title}</h2>\n      {children}\n    </div>\n  );\n}\n\nContainer.defaultProps = {\n  title: '',\n};\nContainer.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default Container;\n//\n","import instance from './auth';\n\nexport const getQuestions = async type => {\n  const { data } = await instance.get(`/qa-test/${type}`);\n  return data;\n};\n\nexport const getResult = async (type, answers) => {\n  const { data } = await instance.post(`/qa-test/${type}-results`, answers);\n  return data;\n};\n"],"names":["Graffic","items","this","props","data","x","result","y","Number","parseInt","animate","duration","colorScale","height","Component","useState","loading","error","setResult","navigate","useNavigate","testType","useSelector","getTypeQuestions","shallowEqual","testAnswers","getTestAnswers","dispatch","useDispatch","useEffect","resultFetch","prevState","type","getResult","prevstate","message","className","styles","parseFloat","src","image","alt","mainMessage","secondaryMessage","onClick","action","actions","Container","testInfo","title","children","s","defaultProps","getQuestions","instance","answers"],"sourceRoot":""}